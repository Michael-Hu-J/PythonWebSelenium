{"name": "test_switch_store", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=97.0.4692.71)\nStacktrace:\n0   chromedriver                        0x000000010ddf2e69 chromedriver + 5160553\n1   chromedriver                        0x000000010dd7d593 chromedriver + 4679059\n2   chromedriver                        0x000000010d9312c8 chromedriver + 172744\n3   chromedriver                        0x000000010d9120be chromedriver + 45246\n4   chromedriver                        0x000000010d987c3c chromedriver + 527420\n5   chromedriver                        0x000000010d99670f chromedriver + 587535\n6   chromedriver                        0x000000010d984623 chromedriver + 513571\n7   chromedriver                        0x000000010d959dce chromedriver + 339406\n8   chromedriver                        0x000000010d95b105 chromedriver + 344325\n9   chromedriver                        0x000000010ddae23e chromedriver + 4878910\n10  chromedriver                        0x000000010ddc5d17 chromedriver + 4975895\n11  chromedriver                        0x000000010ddcba3f chromedriver + 4999743\n12  chromedriver                        0x000000010ddc661a chromedriver + 4978202\n13  chromedriver                        0x000000010dda2bb1 chromedriver + 4832177\n14  chromedriver                        0x000000010dde2fd8 chromedriver + 5095384\n15  chromedriver                        0x000000010dde3161 chromedriver + 5095777\n16  chromedriver                        0x000000010ddfa2a8 chromedriver + 5190312\n17  libsystem_pthread.dylib             0x00007ff81d6114f4 _pthread_start + 125\n18  libsystem_pthread.dylib             0x00007ff81d60d00f thread_start + 15", "trace": "@pytest.fixture(scope=\"class\", name=\"driver\")\n    def init_driver():\n>       return chrome_driver()\n\nTestCase/conftest.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nBasic/driver.py:14: in chrome_driver\n    driver.maximize_window()\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:984: in maximize_window\n    self.execute(command, params)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1057017e0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff81d6114f4 _pthread_start + 125\\\\n18  libsystem_pthread.dylib             0x00007ff81d60d00f thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=97.0.4692.71)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010ddf2e69 chromedriver + 5160553\nE       1   chromedriver                        0x000000010dd7d593 chromedriver + 4679059\nE       2   chromedriver                        0x000000010d9312c8 chromedriver + 172744\nE       3   chromedriver                        0x000000010d9120be chromedriver + 45246\nE       4   chromedriver                        0x000000010d987c3c chromedriver + 527420\nE       5   chromedriver                        0x000000010d99670f chromedriver + 587535\nE       6   chromedriver                        0x000000010d984623 chromedriver + 513571\nE       7   chromedriver                        0x000000010d959dce chromedriver + 339406\nE       8   chromedriver                        0x000000010d95b105 chromedriver + 344325\nE       9   chromedriver                        0x000000010ddae23e chromedriver + 4878910\nE       10  chromedriver                        0x000000010ddc5d17 chromedriver + 4975895\nE       11  chromedriver                        0x000000010ddcba3f chromedriver + 4999743\nE       12  chromedriver                        0x000000010ddc661a chromedriver + 4978202\nE       13  chromedriver                        0x000000010dda2bb1 chromedriver + 4832177\nE       14  chromedriver                        0x000000010dde2fd8 chromedriver + 5095384\nE       15  chromedriver                        0x000000010dde3161 chromedriver + 5095777\nE       16  chromedriver                        0x000000010ddfa2a8 chromedriver + 5190312\nE       17  libsystem_pthread.dylib             0x00007ff81d6114f4 _pthread_start + 125\nE       18  libsystem_pthread.dylib             0x00007ff81d60d00f thread_start + 15\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchWindowException"}, "start": 1643108905949, "stop": 1643108905949, "uuid": "6bc15346-79c1-4953-a40f-98d67374180e", "historyId": "56575899a6e519259efe1f0f4e1a274d", "testCaseId": "7ee5a9813df78893493daa781f408449", "fullName": "TestCase.test_switch_store.TestSwitchStore#test_switch_store", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('login')"}, {"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_switch_store"}, {"name": "subSuite", "value": "TestSwitchStore"}, {"name": "host", "value": "hujiandeMacBook-Pro.local"}, {"name": "thread", "value": "984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_switch_store"}]}